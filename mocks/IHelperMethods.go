// Code generated by mockery 2.12.1. DO NOT EDIT.

package mocks

import (
	context "context"
	testing "testing"

	mock "github.com/stretchr/testify/mock"

	url "net/url"
)

// IHelperMethods is an autogenerated mock type for the IHelperMethods type
type IHelperMethods struct {
	mock.Mock
}

// HmacSha512 provides a mock function with given fields: keyBytes, messageBytes
func (_m *IHelperMethods) HmacSha512(keyBytes []byte, messageBytes []byte) ([]byte, error) {
	ret := _m.Called(keyBytes, messageBytes)

	var r0 []byte
	if rf, ok := ret.Get(0).(func([]byte, []byte) []byte); ok {
		r0 = rf(keyBytes, messageBytes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte, []byte) error); ok {
		r1 = rf(keyBytes, messageBytes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HttpGet provides a mock function with given fields: ctx, _a1, contentType, webHeaders
func (_m *IHelperMethods) HttpGet(ctx context.Context, _a1 *url.URL, contentType string, webHeaders map[string]string) (string, int, error) {
	ret := _m.Called(ctx, _a1, contentType, webHeaders)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *url.URL, string, map[string]string) string); ok {
		r0 = rf(ctx, _a1, contentType, webHeaders)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, *url.URL, string, map[string]string) int); ok {
		r1 = rf(ctx, _a1, contentType, webHeaders)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *url.URL, string, map[string]string) error); ok {
		r2 = rf(ctx, _a1, contentType, webHeaders)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// HttpPost provides a mock function with given fields: ctx, _a1, data, contentType, webHeaders
func (_m *IHelperMethods) HttpPost(ctx context.Context, _a1 *url.URL, data []byte, contentType string, webHeaders map[string]string) (string, int, error) {
	ret := _m.Called(ctx, _a1, data, contentType, webHeaders)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *url.URL, []byte, string, map[string]string) string); ok {
		r0 = rf(ctx, _a1, data, contentType, webHeaders)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, *url.URL, []byte, string, map[string]string) int); ok {
		r1 = rf(ctx, _a1, data, contentType, webHeaders)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *url.URL, []byte, string, map[string]string) error); ok {
		r2 = rf(ctx, _a1, data, contentType, webHeaders)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewIHelperMethods creates a new instance of IHelperMethods. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewIHelperMethods(t testing.TB) *IHelperMethods {
	mock := &IHelperMethods{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
